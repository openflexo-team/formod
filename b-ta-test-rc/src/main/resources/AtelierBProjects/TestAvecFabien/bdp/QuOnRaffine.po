THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & IL_Out.4,(_f(27) & _f(28) & _f(4) & _f(9) => _f(33));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & IL_Out.3,(_f(27) & _f(28) & _f(4) & _f(7) => _f(32));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & IL_Out.2,(_f(27) & _f(28) & _f(4) & _f(30) => _f(31));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & IL_Out.1,(_f(27) & _f(28) & _f(4) & _f(24) => _f(29));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & IL_In.4,(_f(13) & _f(4) & _f(9) => _f(17));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & IL_In.3,(_f(13) & _f(4) & _f(7) => _f(26));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & IL_In.2,(_f(13) & _f(4) & _f(24) => _f(25));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & IL_In.1,(_f(13) & _f(4) & _f(5) => _f(15));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & ML_Out.4,(_f(18) & _f(19) & _f(4) & _f(9) => _f(23));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & ML_Out.3,(_f(18) & _f(19) & _f(4) & _f(7) => _f(22));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & ML_Out.2,(_f(18) & _f(19) & _f(4) & _f(5) => _f(21));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & ML_Out.1,(_f(18) & _f(19) => _f(20));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & ML_In.4,(_f(13) & _f(4) & _f(9) => _f(17));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & ML_In.3,(_f(13) & _f(4) & _f(7) => _f(16));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & ML_In.2,(_f(13) & _f(4) & _f(5) => _f(15));
_f(1) & _f(2) & _f(3) & _f(11) & _f(12) & ML_In.1,(_f(13) => _f(14));
_f(1) & _f(2) & _f(3) & Initialisation.3,(_f(4) & _f(9) => _f(10));
_f(1) & _f(2) & _f(3) & Initialisation.2,(_f(4) & _f(7) => _f(8));
_f(1) & _f(2) & _f(3) & Initialisation.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
dd : INTEGER & 0 <= dd & ((dd) : (NATURAL)) & (0 +1 <= dd) & ((nm) = (((dd) |-> (dd))));
((ee) = (dd));
"Refinement is correct";
"Check invariant ((aa$1) : (NATURAL))";
((0) : (NATURAL));
"Check invariant ((((aa$1 + bb$1) + cc$1)) = (nn))";
((((0 + 0) + 0)) = (0));
"Check invariant ((((aa$1) = (0))) or (((cc$1) = (0))))";
((((0) = (0))) or (((0) = (0))));
nn : INTEGER & 0 <= nn & ((nn) : (NATURAL)) & (nn <= dd);
aa$1 : INTEGER & 0 <= aa$1 & ((aa$1) : (NATURAL)) & bb$1 : INTEGER & 0 <= bb$1 & ((bb$1) : (NATURAL)) & cc$1 : INTEGER & 0 <= cc$1 & ((cc$1) : (NATURAL)) & ((((aa$1 + bb$1) + cc$1)) = (nn)) & ((((aa$1) = (0))) or (((cc$1) = (0))));
(0 +1 <= aa$1);
(0 +1 <= nn);
(((aa$1 - 1)) : (NATURAL));
(((((aa$1 - 1) + bb$1) + cc$1)) = ((nn - 1)));
(((((aa$1 - 1)) = (0))) or (((cc$1) = (0))));
((aa$1 + bb$1) +1 <= dd);
((cc$1) = (0));
(nn +1 <= dd);
(((aa$1 + 1)) : (NATURAL));
(((((aa$1 + 1) + bb$1) + cc$1)) = ((nn + 1)));
(((((aa$1 + 1)) = (0))) or (((cc$1) = (0))));
"Check invariant ((bb$1) : (NATURAL))";
(((bb$1 + 1)) : (NATURAL));
(((((aa$1 - 1) + (bb$1 + 1)) + cc$1)) = (nn));
((aa$1) = (0));
(0 +1 <= bb$1);
(((bb$1 - 1)) : (NATURAL));
"Check invariant ((cc$1) : (NATURAL))";
(((cc$1 + 1)) : (NATURAL));
((((aa$1 + (bb$1 - 1)) + (cc$1 + 1))) = (nn));
((((aa$1) = (0))) or ((((cc$1 + 1)) = (0))));
not(((aa$1) = (0)));
((((aa$1 + bb$1) + cc$1)) = (nn));
cc$1 : INTEGER;
0 <= cc$1;
((cc$1) : (NATURAL));
bb$1 : INTEGER;
0 <= bb$1;
((bb$1) : (NATURAL));
aa$1 : INTEGER;
0 <= aa$1;
((aa$1) : (NATURAL))
END
&
THEORY EnumerateX
END
