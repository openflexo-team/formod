/* The following code was generated by JFlex 1.4.1 on 17/12/18 12:50 */

/*
 * Generated on 12/17/18 12:50 PM
 */
package org.openflexo.ta.b.view;

import java.io.IOException;
import java.io.Reader;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

/**
 * TokenMaker for B language
 * 
 * Generated using https://github.com/bobbylight/TokenMakerMaker.git<br>
 * and files located in BTokenMaker directory
 */

public class BTokenMaker extends AbstractJFlexCTokenMaker {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int EOL_COMMENT = 2;
	public static final int YYINITIAL = 0;
	public static final int MLC = 1;

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\32\1\15"
			+ "\1\20\1\1\1\36\1\34\1\7\2\33\1\23\1\35\1\31\1\27" + "\1\25\1\22\1\4\1\76\2\16\4\6\2\3\1\46\1\31\1\102"
			+ "\1\100\1\101\1\32\1\20\1\50\1\51\1\55\1\64\1\63\1\65" + "\1\75\1\73\1\61\2\1\1\62\1\70\1\57\1\56\1\67\1\1"
			+ "\1\54\1\52\1\53\1\71\1\60\1\77\1\66\1\74\1\72\1\33" + "\1\11\1\33\1\104\1\2\1\0\1\5\1\14\1\5\1\5\1\26"
			+ "\1\43\1\1\1\37\1\44\2\1\1\45\1\1\1\13\1\1\1\41" + "\1\1\1\13\1\42\1\40\1\12\1\1\1\47\1\24\2\1\1\30"
			+ "\1\103\1\30\1\32\uff81\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\3\0\2\1\2\2\1\3\1\4\1\1\1\5\1\6" + "\2\7\1\1\1\7\1\10\4\7\22\1\4\7\1\11"
			+ "\1\12\5\11\1\13\3\11\1\0\1\14\1\0\2\14" + "\1\3\1\15\1\0\1\3\1\0\2\5\1\16\1\17" + "\1\20\2\0\1\21\1\7\4\1\1\22\12\1\1\22"
			+ "\3\1\1\22\23\1\1\0\2\7\1\23\11\0\1\21" + "\1\0\1\24\1\3\1\25\2\3\1\15\1\3\1\5" + "\1\26\1\5\6\1\1\22\10\1\2\22\1\1\1\22"
			+ "\5\1\1\27\7\1\2\22\6\1\11\0\1\3\1\5" + "\40\1\2\0\1\30\2\0\1\31\1\0\1\3\1\5" + "\27\1\5\0\1\3\1\5\1\1\1\22\55\1";

	private static int[] zzUnpackAction() {
		int[] result = new int[306];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"
			+ "\0\317\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"
			+ "\0\317\0\317\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"
			+ "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"
			+ "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4"
			+ "\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\317\0\u0b0d\0\u0b52\0\u0b97"
			+ "\0\u0bdc\0\u0c21\0\317\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"
			+ "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\317\0\u0ed3\0\u0f18\0\u0f5d"
			+ "\0\u0fa2\0\u0fe7\0\317\0\317\0\317\0\u102c\0\u1071\0\u10b6"
			+ "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de"
			+ "\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506"
			+ "\0\u0114\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"
			+ "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"
			+ "\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39"
			+ "\0\u10fb\0\u1b7e\0\u1bc3\0\317\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7"
			+ "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u0e49"
			+ "\0\u1eff\0\317\0\u1f44\0\u1f89\0\u0ed3\0\u1fce\0\u2013\0\317"
			+ "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"
			+ "\0\u2280\0\u223b\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e"
			+ "\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646"
			+ "\0\u268b\0\u0114\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"
			+ "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51"
			+ "\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79"
			+ "\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1"
			+ "\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9"
			+ "\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1"
			+ "\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519"
			+ "\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741"
			+ "\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969"
			+ "\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91"
			+ "\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"
			+ "\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u36fc\0\u3f57\0\u37cb"
			+ "\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f"
			+ "\0\u40b0\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362"
			+ "\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a"
			+ "\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2"
			+ "\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da"
			+ "\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02" + "\0\u4c47\0\u4c8c";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[306];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\4\2\5\1\6\1\7\1\5\1\6\1\10\1\11" + "\1\12\3\5\1\13\1\6\2\4\1\14\1\15\1\16"
			+ "\1\5\1\17\1\5\1\20\1\21\1\4\1\22\1\21" + "\1\23\1\24\1\25\7\5\1\22\1\5\1\26\1\27"
			+ "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37" + "\1\40\1\41\1\42\1\43\1\5\1\44\1\45\1\46"
			+ "\4\5\1\6\1\47\1\50\1\51\1\52\1\53\1\22" + "\10\54\1\55\12\54\1\56\13\54\1\57\3\54\1\60"
			+ "\3\54\1\61\35\54\10\62\1\63\26\62\1\64\3\62" + "\1\65\3\62\1\66\35\62\106\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\31\5\5\0\3\70\2\6\1\70\1\6" + "\2\0\4\70\1\0\1\6\1\0\1\70\3\0\1\70"
			+ "\1\71\1\72\10\0\7\70\1\0\27\70\1\6\1\70" + "\5\0\3\70\2\6\1\70\1\6\2\0\4\70\1\0" + "\1\6\1\0\1\70\3\0\1\73\1\71\1\72\10\0"
			+ "\7\70\1\0\27\70\1\6\1\70\5\0\7\74\1\75" + "\1\76\1\77\73\74\22\0\1\22\60\0\1\100\1\0"
			+ "\10\13\1\101\1\102\3\13\1\103\67\13\21\0\1\14" + "\74\0\1\22\10\0\1\104\1\105\22\0\1\22\31\0"
			+ "\1\22\1\0\1\106\1\107\24\0\1\22\54\0\1\22" + "\7\0\2\110\1\0\1\110\7\0\1\110\6\0\1\22"
			+ "\50\0\1\110\35\0\1\111\50\0\2\22\37\0\1\22" + "\77\0\1\111\5\0\1\22\42\0\1\22\104\0\1\22"
			+ "\5\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\2\5\1\112" + "\1\113\4\5\1\114\20\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\7\5\1\115\4\5\1\116\14\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\4\5\1\117\5\5" + "\1\120\1\5\1\121\10\5\1\122\3\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"
			+ "\1\5\10\0\7\5\1\0\5\5\1\123\16\5\1\124" + "\4\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\14\5"
			+ "\1\125\14\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\1\5\1\126\5\5\1\127\14\5\1\130\4\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\5\5\1\131\10\5" + "\1\131\1\5\1\132\10\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\1\5\1\133\27\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\1\5\1\134\27\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\10\5\1\135\5\5\1\131"
			+ "\2\5\1\136\7\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\7\5\1\137\4\5\1\140\14\5\6\0\6\5"
			+ "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\10\5\1\141\1\142\1\143" + "\1\144\3\5\1\145\11\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\7\5\1\131\4\5\1\146\14\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\1\5\1\147\10\5" + "\1\150\16\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"
			+ "\5\5\1\151\1\5\1\152\2\5\1\131\16\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\1\5\1\153\5\5"
			+ "\1\154\2\5\1\155\16\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\3\5\1\156\4\5\1\157\20\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\24\5\1\160\4\5" + "\105\0\2\22\32\0\1\161\5\0\1\161\42\0\1\22"
			+ "\1\25\1\22\31\0\1\162\5\0\1\22\10\0\1\22" + "\31\0\1\162\1\0\1\163\1\22\102\0\1\162\1\0"
			+ "\1\22\1\0\10\54\1\0\12\54\1\0\13\54\1\0" + "\3\54\1\0\3\54\1\0\35\54\22\0\1\164\122\0"
			+ "\1\165\104\0\1\166\3\0\1\167\107\0\1\170\35\0" + "\10\62\1\0\26\62\1\0\3\62\1\0\3\62\1\0"
			+ "\35\62\40\0\1\171\104\0\1\172\3\0\1\173\107\0" + "\1\174\47\0\1\175\72\0\7\70\2\0\4\70\1\0"
			+ "\1\70\1\0\1\70\3\0\1\70\1\0\1\70\10\0" + "\7\70\1\0\31\70\10\0\2\110\1\0\1\110\7\0"
			+ "\1\110\57\0\1\110\6\0\3\70\2\176\1\70\1\176" + "\2\0\4\70\1\0\1\176\1\0\1\70\3\0\1\70"
			+ "\1\0\1\70\1\177\5\0\1\177\1\0\7\70\1\0" + "\27\70\1\176\1\70\5\0\3\70\4\200\2\0\3\70"
			+ "\1\200\1\0\1\200\1\0\1\70\3\0\1\70\1\0" + "\1\200\10\0\4\70\1\200\2\70\1\0\1\70\2\200"
			+ "\3\70\1\200\5\70\3\200\10\70\1\200\1\70\5\0" + "\7\201\1\202\1\0\74\201\7\0\1\202\75\0\4\201"
			+ "\1\203\1\201\1\204\1\205\1\0\1\74\1\206\3\74" + "\1\203\21\201\1\74\2\201\1\74\32\201\1\203\6\201"
			+ "\22\0\1\22\62\0\11\101\1\207\3\101\1\210\73\101" + "\1\13\1\101\2\13\1\0\1\13\1\211\4\13\21\101"
			+ "\1\13\2\101\1\13\32\101\1\13\6\101\46\0\1\22" + "\33\0\1\22\13\0\1\22\73\0\3\70\2\110\1\70"
			+ "\1\110\2\0\4\70\1\0\1\110\1\0\1\70\3\0" + "\1\70\1\0\1\72\10\0\7\70\1\0\27\70\1\110"
			+ "\1\70\106\0\1\162\4\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\3\5\1\212\25\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\3\5\1\213\25\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\25\5\1\131\3\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\7\5\1\214\21\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\26\5\1\215\2\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"
			+ "\1\5\1\0\1\5\10\0\7\5\1\0\5\5\1\216" + "\23\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\26\5"
			+ "\1\217\2\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\4\5\1\220\6\5\1\221\1\222\14\5\6\0\6\5"
			+ "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\3\5\1\223\25\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\22\5\1\224\6\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\14\5\1\150"
			+ "\14\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\16\5" + "\1\225\12\5\6\0\6\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\3\5\1\224\25\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"
			+ "\1\0\10\5\1\226\20\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\7\5\1\227\21\5\6\0\6\5\2\0"
			+ "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\14\5\1\230\14\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"
			+ "\1\5\10\0\7\5\1\0\4\5\1\231\24\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\5\5\1\232\5\5"
			+ "\1\233\15\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\4\5\1\234\1\5\1\235\2\5\1\236\1\237\16\5"
			+ "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\20\5\1\240" + "\10\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5"
			+ "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\6\5" + "\1\241\22\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"
			+ "\4\5\1\131\24\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\15\5\1\242\13\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\14\5\1\243\14\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\4\5\1\244\24\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\3\5\1\245\25\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\4\5\1\246\13\5" + "\1\247\10\5\6\0\6\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\16\5\1\250\12\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"
			+ "\1\0\13\5\1\126\15\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\10\5\1\131\20\5\6\0\6\5\2\0"
			+ "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\7\5\1\251\4\5\1\252\14\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"
			+ "\1\5\1\0\1\5\10\0\7\5\1\0\30\5\1\253" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\6\5\1\254"
			+ "\10\5\1\255\11\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\15\5\1\256\13\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\10\5\1\255\20\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\14\5\1\222\14\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\12\5\1\257\16\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\12\5\1\260\1\5" + "\1\261\14\5\106\0\1\22\51\0\1\22\31\0\1\22"
			+ "\2\0\1\22\41\0\1\262\105\0\1\263\110\0\1\264" + "\106\0\1\265\75\0\1\266\105\0\1\267\110\0\1\270"
			+ "\106\0\1\271\40\0\4\272\5\0\1\272\1\0\1\272" + "\7\0\1\272\14\0\1\272\4\0\2\272\3\0\1\272"
			+ "\5\0\3\272\10\0\1\272\6\0\3\70\2\176\1\70" + "\1\176\2\0\4\70\1\0\1\176\1\0\1\70\3\0"
			+ "\1\70\1\0\1\70\10\0\7\70\1\0\27\70\1\176" + "\1\70\10\0\2\176\1\0\1\176\7\0\1\176\57\0"
			+ "\1\176\6\0\7\201\1\75\1\0\100\201\1\204\1\201" + "\1\204\1\202\1\0\5\201\1\204\57\201\1\204\12\201"
			+ "\1\74\1\201\1\74\1\202\1\0\5\201\1\74\57\201" + "\1\74\11\201\4\273\1\75\1\0\3\201\1\273\1\201"
			+ "\1\273\7\201\1\273\14\201\1\273\4\201\2\273\3\201" + "\1\273\5\201\3\273\10\201\1\273\6\201\10\101\1\0"
			+ "\77\101\4\274\2\101\1\207\2\101\1\274\1\210\1\274" + "\7\101\1\274\14\101\1\274\4\101\2\274\3\101\1\274"
			+ "\5\101\3\274\10\101\1\274\6\101\1\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\4\5\1\275\24\5\6\0\6\5"
			+ "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\14\5\1\276\14\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\13\5\1\131\15\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\12\5\1\150"
			+ "\16\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\12\5" + "\1\277\16\5\6\0\6\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\21\5\1\300\7\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"
			+ "\1\0\3\5\1\242\25\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\14\5\1\301\14\5\6\0\6\5\2\0"
			+ "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\4\5\1\302\24\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"
			+ "\1\5\10\0\7\5\1\0\14\5\1\131\14\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\12\5\1\303\16\5"
			+ "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\3\5\1\304" + "\2\5\1\305\22\5\6\0\6\5\2\0\1\67\3\5"
			+ "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\12\5\1\306\16\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"
			+ "\7\5\1\0\5\5\1\307\23\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\22\5\1\310\4\5\1\131\1\5"
			+ "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\12\5\1\311" + "\16\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5"
			+ "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\22\5" + "\1\156\6\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"
			+ "\14\5\1\312\14\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\13\5\1\313\15\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\1\5\1\314\27\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\4\5\1\315\24\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\7\5\1\316\3\5\1\317"
			+ "\15\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\1\5" + "\1\320\27\5\6\0\6\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\10\5\1\321\20\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"
			+ "\1\0\24\5\1\322\4\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\12\5\1\323\1\5\1\131\14\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\14\5\1\324\14\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"
			+ "\1\5\1\0\1\5\10\0\7\5\1\0\5\5\1\325" + "\23\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\12\5"
			+ "\1\326\16\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\20\5\1\327\1\330\7\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\15\5\1\331\13\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\27\5\1\131\1\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\24\5\1\332\4\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\12\5\1\333\16\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"
			+ "\1\5\1\0\1\5\10\0\7\5\1\0\14\5\1\334" + "\14\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\7\5"
			+ "\1\150\21\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\13\5\1\224\15\5\6\0\6\5\2\0\1\67\3\5"
			+ "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\5\5\1\224\2\5\1\131\20\5\46\0\1\335"
			+ "\111\0\1\336\64\0\1\263\103\0\1\337\120\0\1\340" + "\111\0\1\341\64\0\1\267\103\0\1\342\62\0\4\343"
			+ "\5\0\1\343\1\0\1\343\7\0\1\343\14\0\1\343" + "\4\0\2\343\3\0\1\343\5\0\3\343\10\0\1\343"
			+ "\6\0\3\201\4\344\1\75\1\0\3\201\1\344\1\201" + "\1\344\7\201\1\344\14\201\1\344\4\201\2\344\3\201"
			+ "\1\344\5\201\3\344\10\201\1\344\6\201\3\101\4\345" + "\2\101\1\207\2\101\1\345\1\210\1\345\7\101\1\345"
			+ "\14\101\1\345\4\101\2\345\3\101\1\345\5\101\3\345" + "\10\101\1\345\6\101\1\0\6\5\2\0\1\67\3\5"
			+ "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\5\5\1\346\23\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"
			+ "\7\5\1\0\5\5\1\347\23\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\10\5\1\350\20\5\6\0\6\5"
			+ "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\1\5\1\131\27\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\6\5\1\140\22\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\14\5\1\351"
			+ "\14\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\10\5" + "\1\352\20\5\6\0\6\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\4\5\1\353\24\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"
			+ "\1\0\5\5\1\354\23\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\6\5\1\224\22\5\6\0\6\5\2\0"
			+ "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\1\5\1\355\27\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"
			+ "\1\5\10\0\7\5\1\0\5\5\1\356\23\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\1\5\1\357\27\5"
			+ "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\5\5\1\131" + "\20\5\1\322\2\5\6\0\6\5\2\0\1\67\3\5"
			+ "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\22\5\1\360\6\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"
			+ "\7\5\1\0\5\5\1\361\23\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\12\5\1\362\16\5\6\0\6\5"
			+ "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\5\5\1\321\23\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\14\5\1\363\14\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\13\5\1\364"
			+ "\15\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\4\5" + "\1\222\24\5\6\0\6\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\14\5\1\365\14\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"
			+ "\1\0\16\5\1\131\12\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\10\5\1\366\20\5\6\0\6\5\2\0"
			+ "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\14\5\1\367\14\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"
			+ "\1\5\10\0\7\5\1\0\10\5\1\370\20\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\14\5\1\371\14\5"
			+ "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\7\5\1\372" + "\21\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5"
			+ "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\12\5" + "\1\373\16\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"
			+ "\12\5\1\374\16\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\10\5\1\140\20\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\13\5\1\242\15\5\47\0\1\263\3\0"
			+ "\1\336\60\0\1\375\63\0\1\337\1\376\4\337\1\376" + "\2\0\3\337\1\0\1\337\1\0\1\376\1\0\1\337"
			+ "\1\376\1\337\1\376\1\337\1\376\1\0\6\376\7\337" + "\1\376\31\337\1\376\46\0\1\267\3\0\1\341\60\0"
			+ "\1\377\63\0\1\342\1\u0100\4\342\1\u0100\2\0\3\342" + "\1\0\1\342\1\0\1\u0100\1\0\1\342\1\u0100\1\342"
			+ "\1\u0100\1\342\1\u0100\1\0\6\u0100\7\342\1\u0100\31\342" + "\1\u0100\7\0\4\u0101\5\0\1\u0101\1\0\1\u0101\7\0"
			+ "\1\u0101\14\0\1\u0101\4\0\2\u0101\3\0\1\u0101\5\0" + "\3\u0101\10\0\1\u0101\6\0\3\201\4\u0102\1\75\1\0"
			+ "\3\201\1\u0102\1\201\1\u0102\7\201\1\u0102\14\201\1\u0102" + "\4\201\2\u0102\3\201\1\u0102\5\201\3\u0102\10\201\1\u0102"
			+ "\6\201\3\101\4\u0103\2\101\1\207\2\101\1\u0103\1\210" + "\1\u0103\7\101\1\u0103\14\101\1\u0103\4\101\2\u0103\3\101"
			+ "\1\u0103\5\101\3\u0103\10\101\1\u0103\6\101\1\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"
			+ "\1\5\10\0\7\5\1\0\1\5\1\u0104\27\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\4\5\1\u0105\24\5"
			+ "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\26\5\1\131" + "\2\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5"
			+ "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\21\5" + "\1\242\7\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"
			+ "\14\5\1\u0106\14\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\1\5\1\243\3\5\1\u0107\23\5\6\0\6\5"
			+ "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\14\5\1\u0108\14\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\4\5\1\u0109\24\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\1\5\1\u010a"
			+ "\27\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\2\5" + "\1\u010b\5\5\1\u010c\20\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\15\5\1\156\13\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\12\5\1\u010d\16\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\1\5\1\u010e\27\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\21\5\1\u010f\7\5" + "\6\0\1\5\1\u0110\4\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\31\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\5\5"
			+ "\1\131\23\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\15\5\1\222\13\5\6\0\6\5\2\0\1\67\3\5"
			+ "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\3\5\1\u0111\25\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"
			+ "\7\5\1\0\12\5\1\355\16\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\5\5\1\u0112\23\5\6\0\6\5"
			+ "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\4\5\1\156\24\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\6\5\1\u0113\22\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\10\5\1\u0114"
			+ "\20\5\27\0\1\337\104\0\1\342\65\0\4\5\5\0" + "\1\5\1\0\1\5\7\0\1\5\14\0\1\5\4\0" + "\2\5\3\0\1\5\5\0\3\5\10\0\1\5\6\0"
			+ "\3\201\4\74\1\75\1\0\3\201\1\74\1\201\1\74" + "\7\201\1\74\14\201\1\74\4\201\2\74\3\201\1\74"
			+ "\5\201\3\74\10\201\1\74\6\201\3\101\4\13\2\101" + "\1\207\2\101\1\13\1\210\1\13\7\101\1\13\14\101"
			+ "\1\13\4\101\2\13\3\101\1\13\5\101\3\13\10\101" + "\1\13\6\101\1\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"
			+ "\6\5\1\u0115\22\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\12\5\1\u0116\16\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\3\5\1\242\15\5\1\u0117\7\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\1\5\1\u0118\27\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\4\5\1\u0119"
			+ "\24\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\13\5" + "\1\253\15\5\6\0\6\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\13\5\1\156\15\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"
			+ "\1\0\4\5\1\242\24\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\1\5\1\333\27\5\6\0\6\5\2\0"
			+ "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\13\5\1\u011a\15\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"
			+ "\1\5\10\0\7\5\1\0\14\5\1\u011b\14\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\7\5\1\u011c\21\5"
			+ "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\3\5\1\u0109" + "\25\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5"
			+ "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\4\5" + "\1\u011d\24\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"
			+ "\1\5\1\372\27\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\14\5\1\242\14\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\4\5\1\u011e\24\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\7\5\1\u011f\21\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\14\5\1\u0120\14\5\6\0"
			+ "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\12\5\1\243\16\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"
			+ "\1\5\1\0\1\5\10\0\7\5\1\0\14\5\1\u011e" + "\14\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\12\5"
			+ "\1\u0121\16\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\10\5\1\u0122\20\5\6\0\6\5\2\0\1\67\3\5"
			+ "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\20\5\1\132\10\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"
			+ "\7\5\1\0\12\5\1\156\16\5\6\0\1\5\1\u0123" + "\4\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\31\5\6\0\6\5"
			+ "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0" + "\1\5\10\0\7\5\1\0\10\5\1\222\20\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\10\5\1\u010c\20\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\3\5\1\u0124"
			+ "\17\5\1\u0124\5\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\4\5\1\u0124\24\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\6\5\1\u0125\2\5\1\u0126\17\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"
			+ "\1\0\1\5\10\0\7\5\1\0\1\5\1\u0127\27\5" + "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\7\5\1\u0128"
			+ "\21\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5" + "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\1\5" + "\1\u0129\27\5\6\0\6\5\2\0\1\67\3\5\1\0"
			+ "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0" + "\4\5\1\u012a\24\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"
			+ "\1\0\10\5\1\u012b\20\5\6\0\6\5\2\0\1\67" + "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\5\5\1\u012c\23\5\6\0\6\5\2\0"
			+ "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5" + "\10\0\7\5\1\0\12\5\1\u012d\16\5\6\0\6\5" + "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"
			+ "\1\5\10\0\7\5\1\0\3\5\1\u012e\25\5\6\0" + "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5" + "\1\0\1\5\10\0\7\5\1\0\12\5\1\u012f\16\5"
			+ "\6\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0" + "\1\5\1\0\1\5\10\0\7\5\1\0\7\5\1\u0130" + "\21\5\6\0\6\5\2\0\1\67\3\5\1\0\1\5"
			+ "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\4\5" + "\1\u0131\24\5\6\0\6\5\2\0\1\67\3\5\1\0" + "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"
			+ "\1\5\1\u0132\27\5\6\0\6\5\2\0\1\67\3\5" + "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5" + "\1\0\10\5\1\242\20\5\6\0\6\5\2\0\1\67"
			+ "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0" + "\7\5\1\0\1\5\1\243\27\5\6\0\6\5\2\0" + "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"
			+ "\10\0\7\5\1\0\2\5\1\u010b\26\5\5\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[19665];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\1\11\4\1\1\11\7\1\2\11\32\1\1\11" + "\5\1\1\11\3\1\1\0\1\1\1\0\3\1\1\11"
			+ "\1\0\1\1\1\0\2\1\3\11\2\0\51\1\1\0" + "\2\1\1\11\11\0\1\1\1\0\2\1\1\11\5\1" + "\1\11\51\1\11\0\42\1\2\0\1\1\2\0\1\1"
			+ "\1\0\31\1\5\0\61\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[306];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of the yytext() string
	 */
	private char zzBuffer[];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/* user code: */

	/**
	 * Constructor. This must be here because JFlex does not generate a no-parameter constructor.
	 */
	public BTokenMaker() {
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start, end, tokenType, so, true);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos - 1, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start, end, tokenType, so, false);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array
	 *            The character array.
	 * @param start
	 *            The starting offset in the array.
	 * @param end
	 *            The ending offset in the array.
	 * @param tokenType
	 *            The token's type.
	 * @param startOffset
	 *            The offset in the document at which this token occurs.
	 * @param hyperlink
	 *            Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset, boolean hyperlink) {
		super.addToken(array, start, end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}

	/**
	 * Returns the first token in the linked list of tokens generated from <code>text</code>. This method must be implemented by subclasses
	 * so they can correctly implement syntax highlighting.
	 *
	 * @param text
	 *            The text from which to get tokens.
	 * @param initialTokenType
	 *            The token type we should start with.
	 * @param startOffset
	 *            The offset into the document at which <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>true</code> if EOF was reached, otherwise <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos >= s.offset + s.count;
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical state
	 * is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		// zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this constructor.
	 *
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public BTokenMaker(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this constructor.
	 *
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public BTokenMaker(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string  */
		int j = 0; /* index in unpacked array */
		while (i < 188) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer    */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState
	 *            the new lexical state
	 */
	@Override
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method will only be called
	 * with things that "Can't Possibly Happen". If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
	 * scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number
	 *            the number of characters to be read again. This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 4: {
					addNullToken();
					return firstToken;
				}
				case 26:
					break;
				case 21: {
					addToken(Token.LITERAL_CHAR);
				}
				case 27:
					break;
				case 16: {
					start = zzMarkedPos - 2;
					yybegin(MLC);
				}
				case 28:
					break;
				case 6: {
					addToken(Token.WHITESPACE);
				}
				case 29:
					break;
				case 20: {
					addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
				}
				case 30:
					break;
				case 22: {
					addToken(Token.ERROR_STRING_DOUBLE);
				}
				case 31:
					break;
				case 17: {
					addToken(Token.LITERAL_NUMBER_FLOAT);
				}
				case 32:
					break;
				case 23: {
					addToken(Token.RESERVED_WORD);
				}
				case 33:
					break;
				case 8: {
					addToken(Token.SEPARATOR);
				}
				case 34:
					break;
				case 1: {
					addToken(Token.IDENTIFIER);
				}
				case 35:
					break;
				case 11: {
					addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
					addNullToken();
					return firstToken;
				}
				case 36:
					break;
				case 15: {
					start = zzMarkedPos - 2;
					yybegin(EOL_COMMENT);
				}
				case 37:
					break;
				case 3: {
					addToken(Token.ERROR_CHAR);
					addNullToken();
					return firstToken;
				}
				case 38:
					break;
				case 5: {
					addToken(Token.ERROR_STRING_DOUBLE);
					addNullToken();
					return firstToken;
				}
				case 39:
					break;
				case 19: {
					yybegin(YYINITIAL);
					addToken(start, zzStartRead + 2 - 1, Token.COMMENT_MULTILINE);
				}
				case 40:
					break;
				case 13: {
					addToken(Token.ERROR_CHAR);
				}
				case 41:
					break;
				case 14: {
					addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
				}
				case 42:
					break;
				case 25: {
					int temp = zzStartRead;
					addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
					addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_EOL);
					start = zzMarkedPos;
				}
				case 43:
					break;
				case 24: {
					int temp = zzStartRead;
					addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
					addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
					start = zzMarkedPos;
				}
				case 44:
					break;
				case 18: {
					addToken(Token.RESERVED_WORD_2);
				}
				case 45:
					break;
				case 12: {
					addToken(Token.ERROR_NUMBER_FORMAT);
				}
				case 46:
					break;
				case 2: {
					addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
				}
				case 47:
					break;
				case 7: {
					addToken(Token.OPERATOR);
				}
				case 48:
					break;
				case 9: {
				}
				case 49:
					break;
				case 10: {
					addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
					return firstToken;
				}
				case 50:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						switch (zzLexicalState) {
							case EOL_COMMENT: {
								addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
								addNullToken();
								return firstToken;
							}
							case 307:
								break;
							case YYINITIAL: {
								addNullToken();
								return firstToken;
							}
							case 308:
								break;
							case MLC: {
								addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
								return firstToken;
							}
							case 309:
								break;
							default:
								return null;
						}
					}
					else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}

}
