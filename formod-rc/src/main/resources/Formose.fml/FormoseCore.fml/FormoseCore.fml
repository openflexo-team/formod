use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://formose.lacl.fr/Formose.viewpoint/FormoseCore.fml")
public class FormoseCore {

  @GetSetProperty(value="allElements", access=get)  
  public List<Element> getAllElements {  
    return this.SelectFlexoConceptInstance(type=Element);  
  }
  public Element projectElement;

  @ActionScheme  
  Void addElement() {  
    Element.createElement("elementTODO")  
  }  

  @DeletionScheme  
  Void delete() {  
  
  }  

  @ActionScheme  
  Void removeElement(Element element) {  
    parameters.element.delete();  
  }  

  @CreationScheme  
  FormoseCore:init(String projectName) {  
    projectElement = Element.createElement("Project");    
    this.firePropertyChange projectElement  
  }  


  @FlexoConcept  
  public class Element {  
  
    public String identifier;  
    public List childrenElements;  
    public String description;  
    public Element parent;  
    public GINAFIBComponent ui;  
    @GetSetProperty(value="requirements", access=get)    
    public List<Requirement> getRequirements {    
      return container.SelectFlexoConceptInstance(type=Requirement);    
    }  
    @GetSetProperty(value="applicableSysMLKaosMethodology", access=get)    
    public SysMLKaos-Methodology getApplicableSysMLKaosMethodology {    
      SysMLKaos-Methodology returned = container.container.FML@RT::SelectUniqueVirtualModelInstance where=(selected.declaringElement = this);      
      if (returned != null) {      
        return returned;      
      }      
      if (parent != null) {      
        return parent.applicableSysMLKaosMethodology;      
      }      
      return null;    
    }  
    @GetSetProperty(value="applicableDomainModelMethodology", access=get)    
    public DomainModel-Methodology getApplicableDomainModelMethodology {    
      DomainModel-Methodology returned = container.container.FML@RT::SelectUniqueVirtualModelInstance where=(selected.declaringElement = this);      
      if (returned != null) {      
        return returned;      
      }      
      if (parent != null) {      
        return parent.applicableDomainModelMethodology;      
      }      
      return null;    
    }  
    @GetSetProperty(value="applicableBMethodology", access=get)    
    public B-Methodology getApplicableBMethodology {    
      B-Methodology returned = container.container.FML@RT::SelectUniqueVirtualModelInstance where=(selected.declaringElement = this);      
      if (returned != null) {      
        return returned;      
      }      
      if (parent != null) {      
        return parent.applicableBMethodology;      
      }      
      return null;    
    }  
  
    @CreationScheme    
    Element:createElement(String elementIdentifier) {    
      identifier = parameters.elementIdentifier;      
      ui = ui.ConfigureGINAFIBComponent();    
    }    
  
    @ActionScheme    
    SysMLKaos-Methodology createSysMLKaosMethodology() {    
      SysMLKaos-Methodology methodology = SysMLKaos-Methodology.create((identifier + "-SysMLKaos"),this);      
      this.firePropertyChange applicableSysMLKaosMethodology      
      return methodology;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    Element createChildrenElement(String elementIdentifier, String elementDescription) {    
      log ("Creating new element " + parameters.elementIdentifier)      
      Element newElement = Element.createElement(parameters.elementIdentifier);      
      newElement.description = parameters.elementDescription;      
      newElement.parent = this;      
      childrenElements.add(newElement)      
      NewElement event = fireEvent NewElement;      
      log ((("Firing event " + event) + " from ") + container)      
      return newElement;    
    }    
  
    @ActionScheme    
    Requirement createRequirement(String name, String description) {    
      log ("Creating new requirement " + parameters.name)      
      log ("Description for new requirement " + parameters.description)      
      Requirement newRequirement = Requirement.createRequirement(parameters.name,parameters.description);      
      this.firePropertyChange requirements      
      log ((("On declenche NewRequirement " + newRequirement) + " dans ") + newRequirement.container)      
      fireEvent NewRequirement      
      return newRequirement;    
    }    
  
    @ActionScheme    
    Requirement createRequirementNoNotification(String name, String description) {    
      Requirement newRequirement = Requirement.createRequirement(parameters.name,parameters.description);      
      this.firePropertyChange requirements      
      return newRequirement;    
    }    
  
    @ActionScheme    
    DomainModel-Methodology createDomainModelMethodology() {    
      log ("applicableSysMLKaosMethodology:" + applicableSysMLKaosMethodology)      
      DomainModel-Methodology methodology = DomainModel-Methodology.create(applicableSysMLKaosMethodology);      
      this.firePropertyChange applicableDomainModelMethodology      
      return methodology;    
    }    
  
    @ActionScheme    
    B-Methodology createBMethodology(FlexoResource sourceProject, FlexoResource generatedProject) {    
      B-Methodology methodology = B-Methodology.create(applicableDomainModelMethodology,parameters.sourceProject,parameters.generatedProject);      
      this.firePropertyChange applicableBMethodology      
      return methodology;    
    }    
  
  
    @FlexoConcept    
    public class Requirement {    
      
      public String name;    
      public String description;    
      public String status;    
      
      @CreationScheme      
      Requirement:createRequirement(String name, String description) {      
        log ("*********** Create new requirement " + parameters.name)        
        name = parameters.name;        
        description = parameters.description;        
        container.firePropertyChange requirements      
      }      
      
      @DeletionScheme      
      public Void delete() {      
        container.firePropertyChange requirements      
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class Requirement {  
  
    public String name;  
    public String description;  
    public String status;  
  
    @CreationScheme    
    Requirement:createRequirement(String name, String description) {    
      log ("*********** Create new requirement " + parameters.name)      
      name = parameters.name;      
      description = parameters.description;      
      container.firePropertyChange requirements    
    }    
  
    @DeletionScheme    
    public Void delete() {    
      container.firePropertyChange requirements    
    }    
  
  }  

  @FlexoConcept  
  public class NewRequirement {  
  
    public Requirement requirement;  
  
    @CreationScheme    
    NewRequirement:create(Requirement aRequirement) {    
      requirement = parameters.aRequirement;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class NewElement {  
  
    public Element element;  
  
    @CreationScheme    
    NewElement:create(Element anElement) {    
      element = parameters.anElement;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
