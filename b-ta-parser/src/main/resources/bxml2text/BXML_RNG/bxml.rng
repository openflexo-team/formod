# DISTRIBUTED UNDER LICENCE GPL V3.0
# A RELAX NG compact syntax pattern for a bxml document.
grammar {
	include "substitution.rng"
	include "predicate.rng"
	include "expression.rng"
	include "identifier.rng"
	include "attribute.rng"
	
	start = 
		element Machine {
			attribute name { text },
			attribute type { "abstraction" | "refinement" | "implementation" },
			Attribute?,
			element Abstraction { Attribute?, text }?,
			element Parameters { 
				Attribute?, 
				element Id { Identifier }+ 
			}?, 
			element Constraints { Attribute?, Predicate }?,
			element Includes { Attribute?, ReferencedMachine+ }?,
			element Imports { Attribute?, ReferencedMachine+ }?,
			element Sees { Attribute?, ReferencedMachine+ }?,
			element Extends { Attribute?, ReferencedMachine+ }?,
			element Uses { Attribute?, ReferencedMachine+ }?,
			element Promotes {
				Attribute?,
				element Promoted_Operation { Attribute?, text }+
			}?,
			element Values {
				Attribute?,
				element Valuation {
					Attribute?,
					attribute ident { text },
                                        attribute typref { xsd:integer },
					Expression
				}+
			}?,
			element Sets {
				Attribute?,
				element Set {
					Attribute?,
					element Id { Identifier },
					element Enumerated_Values {
						element Id { Identifier }+
					}?
				}+
			}?,
			element Abstract_Constants {
				Attribute?,
				element Id { Identifier }+
			}?,
			element Concrete_Constants {
				Attribute?,
				element Id { Identifier }+
			}?,
			element Abstract_Variables {
				Attribute?,
				element Id { Identifier }+
			}?,
			element Concrete_Variables {
				Attribute?,
				element Id { Identifier }+
			}?,
                        element Variant { Attribute?, Expression } ?,
			element Properties { Attribute?, Predicate }?,
			element Invariant { Attribute?, Predicate }?,
			element Initialisation { Attribute?, Substitution }?,
			element Assertions { Attribute?, Predicate+ }?,
			element Local_Operations { Attribute?, Operation+ }?,
			element Operations { Attribute?, Operation+ }?,
			element TypeInfos { element Type { TypeInfo }* }
		}
	Predicate |= element Set { element Id { Identifier } }
	ReferencedMachine =
		element Referenced_Machine {
			Attribute?, 
			element Name { text },
			element Instance {text}?,
			element Parameters { Expression+ }?
		}
	Operation = 
		element Operation {
			Attribute?,
			attribute name { text },
			element Refines { Attribute?, element Id { Identifier }+ }?,
			element Output_Parameters { element Id { Identifier }+ }?,
			element Input_Parameters { element Id { Identifier }+ }?,
			element Precondition { Predicate }?,
			element Body { Substitution }
		}
	TypeInfo =
		attribute id { xsd:integer },
		Type2
	Type2 = 
	(	element Id {attribute value { text } }
                | element Unary_Exp { Unary_Exp_type2 }
                | element Binary_Exp { Binary_Exp_type2 }
		| Struct
		| element Generic_Type { text }
	)

        Unary_Exp_type2 =
                attribute op { "POW" },
                Type2

        Binary_Exp_type2 =
                attribute op { "*" },
                Type2,
                Type2
}
